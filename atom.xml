<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>呆萌兔の博客</title>
  
  <subtitle>呆萌兔の博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://rabbit2020.com/"/>
  <updated>2020-05-12T12:23:24.792Z</updated>
  <id>http://rabbit2020.com/</id>
  
  <author>
    <name>呆萌兔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K-最近邻算法</title>
    <link href="http://rabbit2020.com/2020/05/12/cv/knn/"/>
    <id>http://rabbit2020.com/2020/05/12/cv/knn/</id>
    <published>2020-05-12T12:00:00.000Z</published>
    <updated>2020-05-12T12:23:24.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  最近学习CV，学习K-最近邻算法，K-最近邻算法是图像分类中最基础算法，在做的过程中了解欧式距离与曼哈顿距离，python排序中lambda表达式的使用等等。<br>  K-最近邻算法虽不常用，但是机器学习中最简单易懂的算法，没有之一。<b>该算法通过新样本与已训练好的数据求欧式距离，求得的数据进行从小到大排序，选取前K个，之后用前K个数据进行投票表决，通过投票结果对新样本进行归类。<b></b></b></p><b><b><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><pre><code>import math# 一、构建一个已分好类的数据集movie_data = {"宝贝当家": [45, 2, 9, "喜剧片"],              "美人鱼": [21, 17, 5, "喜剧片"],              "澳门风云3": [54, 9, 11, "喜剧片"],              "功夫熊猫3": [39, 0, 31, "喜剧片"],              "谍影重重": [5, 2, 57, "动作片"],              "叶问3": [3, 2, 65, "动作片"],              "伦敦陷落": [2, 3, 55, "动作片"],              "我的特工爷爷": [6, 4, 21, "动作片"],              "奔爱": [7, 46, 4, "爱情片"],              "夜孔雀": [9, 39, 8, "爱情片"],              "代理情人": [9, 38, 2, "爱情片"],              }#  二、计算一个新样本与数据集中所有数据的距离new_data = {"唐人街探案":[23, 3, 17, ""]}x = new_data.get("唐人街探案")KNN = []for key, v in movie_data.items():    # 求新样本与已有样本的欧氏距离    d = math.sqrt((x[0] - v[0]) ** 2 + (x[1] - v[1]) ** 2 + (x[2] - v[2]) ** 2)    KNN.append([key, round(d, 2)])      # 保留两位小数print("1.欧氏距离计算：{}".format(KNN))# 三、数据排序KNN.sort(key=lambda dis: dis[1])print("2.数据排序：{}".format(KNN))# 四、选取距离最小的k个样本。KNN=KNN[:5]print("3.选取最小距离的K(本例为5)个样本：{}".format(KNN))# 五、根据所选出的数据进行投票labels = {"喜剧片":0,"动作片":0,"爱情片":0}for s in KNN:    label = movie_data[s[0]]    # 获取value    labels[label[3]] += 1       # label[3]是标签类型labels = sorted(labels.items(), key=lambda l:l[1], reverse=True)print("4.K个数据进行投票：","投票结果：{}".format(labels), "归类结果：{}".format(labels[0][0]),sep='\n')# 分类结束：new_data["唐人街探案"][3] = labels[0][0]print("分类结果：{}".format(new_data))</code></pre><h2 id="参考博文"><a href="#参考博文" class="headerlink" title="参考博文"></a>参考博文</h2><p>K最近邻算法（KNN）:<a href="https://blog.csdn.net/saltriver/article/details/52502253" target="_blank" rel="noopener">https://blog.csdn.net/saltriver/article/details/52502253</a><br>python 字典相关操作: <a href="https://blog.csdn.net/fengbansha/article/details/85239224" target="_blank" rel="noopener">https://blog.csdn.net/fengbansha/article/details/85239224</a><br>python lambda表达式:<a href="https://www.cnblogs.com/hf8051/p/8085424.html" target="_blank" rel="noopener">https://www.cnblogs.com/hf8051/p/8085424.html</a></p></b></b><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  最近学习CV，学习K-最近邻算法，K-最近邻算法是图像分类中最基础算法，在做的过程中了解欧式距离与曼哈顿距离，python排序中lamb
      
    
    </summary>
    
    
      <category term="机器学习" scheme="http://rabbit2020.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="CV" scheme="http://rabbit2020.com/tags/CV/"/>
    
      <category term="机器学习" scheme="http://rabbit2020.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>操作系统 第一章 思维导图</title>
    <link href="http://rabbit2020.com/2020/05/07/cao-zuo-xi-tong-bi-ji/cao-zuo-xi-tong-yi/"/>
    <id>http://rabbit2020.com/2020/05/07/cao-zuo-xi-tong-bi-ji/cao-zuo-xi-tong-yi/</id>
    <published>2020-05-07T03:00:00.000Z</published>
    <updated>2020-05-07T04:54:28.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  根据老师上课讲的内容结合课本，将操作系统第一章的基本内容整理成为思维导图（内容比较全）。结合课本1.2与1.3学习可能效果会更好些。</p><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/07img/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E4%B8%80.png" alt=""></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接：<a href="https://pan.baidu.com/s/1TijjgfR5ezJXUak8job3Lg" target="_blank" rel="noopener">https://pan.baidu.com/s/1TijjgfR5ezJXUak8job3Lg</a><br>提取码：m7uc</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  根据老师上课讲的内容结合课本，将操作系统第一章的基本内容整理成为思维导图（内容比较全）。结合课本1.2与1.3学习可能效果会更好些。&lt;/
      
    
    </summary>
    
    
      <category term="操作系统" scheme="http://rabbit2020.com/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="笔记" scheme="http://rabbit2020.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="操作系统" scheme="http://rabbit2020.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="思维导图" scheme="http://rabbit2020.com/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法--快速排序</title>
    <link href="http://rabbit2020.com/2020/05/06/suan-fa/pai-xu/kuai-su-pai-xu/"/>
    <id>http://rabbit2020.com/2020/05/06/suan-fa/pai-xu/kuai-su-pai-xu/</id>
    <published>2020-05-06T15:03:00.000Z</published>
    <updated>2020-05-07T05:30:03.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  好久没有写程序题很多东西都忘记了，所以以博客的形式把这些算法记录下来。本人排序只会冒泡（也忘的差不多了）（大二了，还好意思说）。由于冒泡时间复杂度(N²)太高，所以想用一下其他算法(呵，tui！明明就是啥也不会，学点新的算法 ) </p><h2 id="快速排序详解"><a href="#快速排序详解" class="headerlink" title="快速排序详解"></a>快速排序详解</h2><h4 id="一、啥是快速排序？"><a href="#一、啥是快速排序？" class="headerlink" title="一、啥是快速排序？"></a>一、啥是快速排序？</h4><p>  快速排序由C. A. R. Hoare在1960年提出。<b>它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</b>          —摘自《百度百科》 </p><h4 id="二、过程"><a href="#二、过程" class="headerlink" title="二、过程"></a>二、过程</h4><p>  百度已经把基本思想说的差不多了，那该如何实现呢？</p><ol><li><b>选数</b>，先从数列中取出一个数作为基准数。</li><li><b>分区</b>，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</li><li><b>递归</b>，再对左右区间重复第二步，直到各区间只有一个数。<br><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/06img/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt=""></li></ol><h4 id="三、代码区"><a href="#三、代码区" class="headerlink" title="三、代码区"></a>三、代码区</h4><pre><code>// 快速排序（从小到大）void quickSort(int left, int right, int[] arr){    // 递归出口    if(left &gt;= right)         return;    int i, j, base;    i = left, j = right;    base = arr[left];   // 选数，取最左边的数为基准数    while (i &lt; j)       // 分区    {        // 注意两个while的顺序，会影响基准数最后如何放置        while (arr[j] &gt;= base &amp;&amp; i &lt; j)  // 找到右边比基准数小的数            j--;        while (arr[i] &lt;= base &amp;&amp; i &lt; j)  // 找到左边比基准数大的数            i++;        if(i &lt; j)   // 判断i是否在j的左边，若在交换        {            int temp = arr[i];            arr[i] = arr[j];            arr[j] = temp;        }    }    // 基准数归位    arr[left] = arr[i];    arr[i] = base;    // 递归    quickSort(left, i-1, arr);    quickSort(i+1, right, arr);}</code></pre><h4 id="四、性能分析"><a href="#四、性能分析" class="headerlink" title="四、性能分析"></a>四、性能分析</h4><ul><li>最优情况：每一次都平分数组</li><li>最差情况：每次选出的数为该部分最大/最小值 – 退化为冒泡排序</li></ul><ol><li><p>时间复杂度</p><ul><li>最优的情况下时间复杂度为：O(nlogn)；</li><li>最差的情况下时间复杂度为：O(n²);  </li><li><b>一般情况下时间复杂度为：O(nlogn)</b></li></ul></li><li><p>空间复杂度</p><ul><li>最优的情况下空间复杂度为：O(logn)； </li><li>最差的情况下空间复杂度为：O(n);  </li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;  好久没有写程序题很多东西都忘记了，所以以博客的形式把这些算法记录下来。本人排序只会冒泡（也忘的差不多了）（大二了，还好意思说）。由于冒泡
      
    
    </summary>
    
    
      <category term="算法" scheme="http://rabbit2020.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://rabbit2020.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="快速排序" scheme="http://rabbit2020.com/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Linux目录结构</title>
    <link href="http://rabbit2020.com/2020/05/06/linux/linux-mu-lu-jie-gou/"/>
    <id>http://rabbit2020.com/2020/05/06/linux/linux-mu-lu-jie-gou/</id>
    <published>2020-05-06T11:57:00.000Z</published>
    <updated>2020-05-06T13:25:54.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>  首先，熟悉一下Linux的目录结构。</p><p>  <img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/05img/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt=""></p><blockquote><p><b>常用目录：</b></p></blockquote><ul><li><font color="red">/bin<br>  bin是Binary的缩写, 这个目录存放着最经常使用的命令。</font></li><li><font color="red">/boot<br>  这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</font></li><li><font color="red">/etc<br>  这个目录用来存放所有的系统管理所需要的配置文件和子目录。</font></li><li><font color="red">/home<br>  用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</font></li><li><font color="red">/lib<br>  这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。 </font> </li><li><font color="red">/opt<br>  这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</font></li><li><font color="red">/root<br>  该目录为系统管理员，也称作超级权限者的用户主目录。</font>  </li><li><font color="red">/sbin<br>  s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</font></li><li><font color="red">/sys<br>   这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs。sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。<br>  该文件系统是内核设备树的一个直观反映。<br>  当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</font></li><li><font color="red">/tmp<br>  这个目录是用来存放一些临时文件的。</font></li><li><font color="red">/usr<br>  这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</font></li><li><font color="red">/usr/bin<br>  系统用户使用的应用程序。</font></li><li><font color="red">/usr/sbin<br>  超级用户使用的比较高级的管理程序和系统守护程序。</font></li><li><font color="red">/usr/src<br>  内核源代码默认的放置目录。</font></li><li><font color="red">/var<br>  这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</font></li></ul><blockquote><p><b>特殊目录符号：</b></p></blockquote><ul><li><font color="red">/ 根目录 </font></li><li><font color="red">. 当前目录 </font></li><li><font color="red">.. 上级目录 </font></li></ul><blockquote><p><b>不常用目录：</b></p></blockquote><ul><li>/dev<br>  dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li>/lost+found<br>  这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。  </li><li>/media<br>  linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。  </li><li>/mnt<br>  系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。  </li><li>/proc<br>  这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</li><li>/selinux<br>   这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。  </li><li>/srv<br>  该目录存放一些服务启动之后需要提取的数据。  </li><li>/run<br>  是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux目录结构&quot;&gt;&lt;a href=&quot;#Linux目录结构&quot; class=&quot;headerlink&quot; title=&quot;Linux目录结构&quot;&gt;&lt;/a&gt;Linux目录结构&lt;/h2&gt;&lt;p&gt;  首先，熟悉一下Linux的目录结构。&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;ht
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://rabbit2020.com/categories/Linux/"/>
    
    
      <category term="笔记" scheme="http://rabbit2020.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="http://rabbit2020.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于博客</title>
    <link href="http://rabbit2020.com/2020/04/27/bo-ke-jian-jie/guan-yu-bo-ke/"/>
    <id>http://rabbit2020.com/2020/04/27/bo-ke-jian-jie/guan-yu-bo-ke/</id>
    <published>2020-04-27T15:57:00.000Z</published>
    <updated>2020-05-07T03:05:21.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="博客细说"><a href="#博客细说" class="headerlink" title="博客细说"></a>博客细说</h2><p>  emmm，前几天刚刚弄了个服务器，然后就试了试搭了个博客。这样算下来博主有三个博客了，虽然内容不多，之后我会慢慢整理上去的。  </p><p>先介绍下这三个博客吧~  </p><ol><li>首先是本站，本站用Hexo搭建，主题为matery，很棒的一个主题，如果大家想看看如何搭建的话可以访问 <a href="https://blinkfox.github.io/" target="_blank" rel="noopener">闪烁之狐</a>、<a href="http://sunhwee.com" target="_blank" rel="noopener">洪卫の博客</a>、<a href="https://yafine-blog.cn/posts/4ab2.html" target="_blank" rel="noopener">码酱</a>,不需要域名、服务器即可搭建(当然如果如果有域名，可以将域名解析至该博客网址)。介绍下Hexo<br><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/04img/hexo%E9%A1%B5%E9%9D%A2.png" alt=""><br><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/04img/vs%E7%BC%96%E5%86%99.png" alt=""></li></ol><ul><li>优点：主题多可自选、灵活性强、接触源码</li><li>缺点：接触源码(可能一些小伙伴直接劝退)、无后台、发文章需要写md格式文件</li></ul><ol start="2"><li>其次是用服务器搭的那个博客(<a href="http://123.56.136.23:8090/" target="_blank" rel="noopener">传送门</a>), 网站使用halo搭建，主题为默认主题(不知道为啥其他主题加不进去，可能是我太菜~<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8">💔</span>) 。怎么说呢，halo这个框架正处于发展初期吧，主题比较少，很多主题和简约版的个人空间差不多吧(个人认为，接触的比较少，如果有搭建的朋友，希望能深入交流)<br><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/04img/halo%E9%A1%B5%E9%9D%A2.png" alt=""><br><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/04img/halo%E5%90%8E%E5%8F%B0.png" alt=""></li></ol><ul><li>优点：halo很少会让你接触源码，也就前期敲些命令，配主题、发文章、上传图片什么的都可在后台设置，很方便(后台做的也很棒)</li><li>缺点：需要有服务器(当然也可在你本机搭建，不过如果你电脑关机或断网，网页就找不到了)，如果要域名解析的话需要备案，需要ssl证书申请</li></ul><ol start="3"><li><a href="https://www.cnblogs.com/DullRabbit/" target="_blank" rel="noopener">博客园</a>, emmm，我的博客园挺简洁的，写的文章挺多哈哈……</li></ol><h2 id="博客记录"><a href="#博客记录" class="headerlink" title="博客记录"></a>博客记录</h2><p>  博主有三个博客，本站主要是用来写一些学习笔记、记录生活和学习历程，博客园主要写一些练习题、记录学习中遇到的问题、个人总结，服务器的那个博客呢，主要是用来整合文章的。</p><p>  好了，今天就记录到这里了，也不早了，晚安~<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8">😪</span></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;博客细说&quot;&gt;&lt;a href=&quot;#博客细说&quot; class=&quot;headerlink&quot; title=&quot;博客细说&quot;&gt;&lt;/a&gt;博客细说&lt;/h2&gt;&lt;p&gt;  emmm，前几天刚刚弄了个服务器，然后就试了试搭了个博客。这样算下来博主有三个博客了，虽然内容不多，之后我会慢慢整理上去
      
    
    </summary>
    
    
      <category term="博客" scheme="http://rabbit2020.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="随笔" scheme="http://rabbit2020.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="http://rabbit2020.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Python 高级语法（一） 包</title>
    <link href="http://rabbit2020.com/2020/04/16/python-xue-xi/python-gao-ji-yu-fa-bao/"/>
    <id>http://rabbit2020.com/2020/04/16/python-xue-xi/python-gao-ji-yu-fa-bao/</id>
    <published>2020-04-16T11:00:00.000Z</published>
    <updated>2020-05-06T13:22:43.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python-高级语法（一）-包"><a href="#Python-高级语法（一）-包" class="headerlink" title="Python 高级语法（一） 包"></a>Python 高级语法（一） 包</h1><hr><h2 id="1、模块"><a href="#1、模块" class="headerlink" title="1、模块"></a>1、模块</h2><ul><li><p>一个模块就是一个python代码的文件，后缀名是.py就可以，模块就是python文件</p></li><li><p>为什么要用模块？</p><ul><li>程序太大，编写维护不方便，需要拆分</li><li>模块可以增加代码的重复利用方式</li><li>当做命名空间使用，避免命名冲突</li></ul></li><li><p>如何定义模块？</p><ul><li>模块是python文件，所以任何代码可以直接书写</li><li>根据模块的规范，最好在模块中编写以下内容<ul><li>函数（单一功能）</li><li>类（相似功能的组合，或者类似业务模块）</li><li>测试代码</li></ul></li></ul></li><li><p>如何使用模块？</p><ul><li><p>模块直接导入</p></li><li><p>语法</p><pre><code>import module_name  module_name.function_name  module_name.class_name</code></pre></li><li><p>import 模块 as 别名</p><ul><li>导入的同时给模块起个别名</li><li>其余用法跟第一种相同</li></ul></li><li><p>form module_name import function_name, class_name</p><ul><li>按上述方法有选择行导入</li><li>使用的时候直接使用导入的内容，不需要前缀</li></ul></li><li><p>form module_name import *</p><ul><li>导入模块所有内容 </li><li>类似于 import module_name 有区别：<ul><li>优点：不需要写前缀</li><li>缺点：可能会有命名污染</li></ul></li></ul></li></ul></li><li><p><code>if __name__ == '__main__'</code>的使用</p><ul><li>可以有效避免模块代码被导入的时候被动执行的问题</li><li>建议所有程序的入口都一此代码为入口</li></ul></li></ul><h2 id="2、模块的搜索路径和存储"><a href="#2、模块的搜索路径和存储" class="headerlink" title="2、模块的搜索路径和存储"></a>2、模块的搜索路径和存储</h2><ul><li><p>什么是模块的搜索路径  </p><ul><li>加载摸块的时候，系统会在哪些地方寻找此模快  </li></ul></li><li><p>系统默认的模块搜索路径  </p><pre><code>import sys  sys.path # 属性可以获取路径列表</code></pre></li><li><p>添加搜索路径  </p><pre><code>sys.path.append(dir)</code></pre></li><li><p>模块的加载顺序</p><ol><li>先搜索内存中已经加载好的模块</li><li>搜索python的内置模块（eg：print())</li><li>搜索sys.path路径</li></ol></li></ul><h2 id="3、包"><a href="#3、包" class="headerlink" title="3、包"></a>3、包</h2><ul><li>包是一种组织管理代码的方式，包里存放的是模块，用于将模块包含在一起的文件夹就是包</li><li>自定义包结构  </li></ul><pre><code>/---包/---/--- __init__.py/---/--- 模块1/---/--- 模块2/---/--- 子包（子文件夹）/---/---/--- __init__.py/---/---/--- 子包模块1/---/---/--- 子包模块2</code></pre><ul><li><p>包的导入操作</p><ul><li><p>import package_name</p><ul><li><p>直接导入一个包 可以使用 <code>__init__.py</code>中的内容</p></li><li><p>使用方式是：  </p><pre><code>package_name.func_namepackage_name.class_name.func_name()</code></pre></li></ul></li><li><p>import package_name as 别名</p><ul><li>具体用法、作用方式与上述简单导入一致</li><li>注意的是此种方法默认对<code>__init__.py</code>内容的导入</li></ul></li><li><p>import package.module</p><ul><li><p>导入包中某个具体的模块</p></li><li><p>使用方法</p><pre><code>package.module.func_name  package.module.class.fun()package.module.class.var</code></pre></li></ul></li><li><p>import package.module as 别名</p><ul><li>具体模块应用别名</li></ul></li><li><p>form … import …  </p><ul><li><p>from package import module1, module2, module3,…</p><ul><li><p>此种方法不执行<code>__init__.py</code>的内容</p><pre><code>form package import modulemodule.func_name()</code></pre></li></ul></li><li><p>form package import *</p><ul><li><p>导入当前包<code>__init__.py</code>文件中所有的函数和类</p></li><li><p>使用方法</p><pre><code>func_name()class_name.func_name()class_name.var</code></pre></li></ul></li><li><p>form package.module import *</p><ul><li>导入包中指定模块的所有内容</li></ul></li></ul></li></ul></li><li><p>在开发环境中我经常会引用其他模块，可以在低昂前包中直接导入其他模块的内容</p><ul><li>import 完整的包或者模块的路径</li></ul></li><li><p><code>__all__</code> 的用法</p><ul><li>在使用 from package import * 的时候 * 可以导入的内容</li><li><code>__init__.py</code> 中如果文件为空， 或者没有 <code>__all__</code> 那么只可以把<code>__init__.py</code>中的内容导入</li><li><code>__init__.py</code> 中如果设置了<code>__all__</code> 的值，那么则按照<code>__all__</code>指定的子包或模块进行加载，如此则不会载入<code>__init__.py</code>中其他的内容</li><li><code>__all__ = ['module1','module2','package',....]</code></li></ul></li></ul><h2 id="4、命名空间"><a href="#4、命名空间" class="headerlink" title="4、命名空间"></a>4、命名空间</h2><ul><li><p>用于区分不同位置不同功能但相同名称的函数或者变量的一个特定的前缀</p></li><li><p>作用是防止命名冲突</p><pre><code>setName()Student.setName()</code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Python-高级语法（一）-包&quot;&gt;&lt;a href=&quot;#Python-高级语法（一）-包&quot; class=&quot;headerlink&quot; title=&quot;Python 高级语法（一） 包&quot;&gt;&lt;/a&gt;Python 高级语法（一） 包&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;1、模块
      
    
    </summary>
    
    
      <category term="python学习" scheme="http://rabbit2020.com/categories/python%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="python学习" scheme="http://rabbit2020.com/tags/python%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Python高级语法" scheme="http://rabbit2020.com/tags/Python%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>给自制力差的自己</title>
    <link href="http://rabbit2020.com/2020/02/18/sui-bi/xie-gei-zi-zhi-li-chai-de-zi-ji/"/>
    <id>http://rabbit2020.com/2020/02/18/sui-bi/xie-gei-zi-zhi-li-chai-de-zi-ji/</id>
    <published>2020-02-18T03:30:00.000Z</published>
    <updated>2020-05-06T13:25:44.898Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自制力差的症状"><a href="#自制力差的症状" class="headerlink" title="自制力差的症状"></a>自制力差的症状</h3><hr><p>表现的症状或后果包括但不限于：</p><ol><li>无法长时间做同一件事情</li><li>注意力很容易被转移</li><li>情绪管理存在问题，遇到外部影响，情绪波动较大</li><li>常年没有完整阅读过任何一本读物</li><li>由于浅阅读及情绪波动，导致语言表达能力退化，无法将文字顺畅转化为口语进行表达</li><li>精神状态起伏，以致影响身体协调能力、语言组织能力的起伏</li><li>短时记忆存在问题，在几秒钟之内会忘记之前所要做的事情，想说的话</li></ol><p> 很多人觉得自己计划完不成，拖延，生活中养成种种恶习的根源在于自制力不强，以为增强了自制力，一切问题就能迎刃而解——这个想法是错的，自制力并不是解决这些问题的关键。</p><p> 那什么才是呢？诸位稍安勿燥，这个后面自然会讲到，但在此之前，且听我讲一个哈佛学霸的故事。</p><h3 id="一、75-真实的故事"><a href="#一、75-真实的故事" class="headerlink" title="一、75%真实的故事"></a>一、75%真实的故事</h3><hr><p>  故事主人公叫 Tal ，是哈佛大学心理系大三的学生，同时也是学校壁球队的主力。他每天很早起床去跑步，然后去学校，一天的课程结束后，他会去球场和教练进行常规训练、打比赛，在此之后，他会去健身房健身，然后回家，做作业，看书学习，睡觉。日复一日，从不间断。</p><p>  于是大家纷纷认为 Tal 童鞋是一个高度自律的学霸。Tal 童鞋也是这么看待自己的，直到寒假到来。</p><p>  作为学霸，寒假当然不会满足于过过圣诞节，看看之前很火的天朝剧《Nirvana in Fire》（琅琊榜），Tal 打算预学两门下学期的课，完成一个 Research Project，并且平均每天保持1小时以上的锻炼。</p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/01_%E7%90%85%E7%90%8A%E6%A6%9C.png" alt=""></p><p>  看到这里我知道有人要跳出来说：“不！这不是真的！学霸辣么自律，寒假计划怎么会失败？！一定是你瞎编的！”</p><p>  对，如你所见，我瞎编了25%的部分，但那仅仅是具体的失败细节，事实仍然没有变化——Tal童鞋的计划的的确确泡汤了。不信你看，下面是他的原话，还有视频截图为证。</p><blockquote><p>  I can’t wait to have the freedom without squash and just focus on my classes. Catch up on all the readings and writings and stuff. Winter holiday came. I stopped playing completely. And instead of becoming more productive, I became far less productive.<br>  我等不及没有壁球的自由，以专注于我的学习，追上阅读、写作的进度。寒假来了，我不用再进行（壁球）训练了，但与高效学习相反，我反而效率变低很多。</p></blockquote><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/02_tal.png" alt=""></p><p>  有些读者已经认出 Tal 了，没错，他现在是哈佛的 Tal 教授，这张图来自于他广为流传的《积极心理学》课程的第11集的39分47秒。（借机安利下，作为哈佛当年最受欢迎的选修课没有之一，这门课于2010年被网易公开课收录，并取了个很鸡汤的名字，叫《哈佛幸福课》，此后长期霸占排行榜第一，累计观看数早已破千万。）</p><h3 id="二、学霸们的困扰"><a href="#二、学霸们的困扰" class="headerlink" title="二、学霸们的困扰"></a>二、学霸们的困扰</h3><hr><p>  Tal 教授用亲身经历证明了，在寒假计划这种事上，学霸和普通人其实有着同样的困扰。有人会说Tal 是个例，但不是的，我的很多朋友都是学霸，即使是在 MIT 念 Phd 的哥们，也会面临在家睡到中午起不来，学习计划迟迟无法落实的问题。</p><p>  当然，还是有人会举手，说不对啊，我就认识那种寒假计划很充实，还全都落实了的学霸！对，没错，我们姑且把这样的人称之为“成熟体学霸”，把前面那些计划泡汤了的称为“幼年体学霸”。在你们见到的那些学霸里，相当一部分仍处于“幼年体”，仍会和普通人一样，受到自控力和拖延症的困扰。</p><p>  那么问题来了，“幼年体学霸”是如何成长为“成熟体学霸“的呢？</p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/03_%E6%95%B0%E7%A0%81%E5%AE%9D%E8%B4%9D.png" alt=""></p><b>虽然计划泡汤了，学霸毕竟是学霸，很快展现出了他与普通人的区别：<p>  普通人是这样的：计划失败 -&gt; 沮丧 -&gt; 骂自己一顿 -&gt; 制订新计划 -&gt; 继续失败</p></b><p><b>  学霸是这样的：计划失败 -&gt; 沮丧 -&gt; 骂自己一顿 -&gt; 深度思考计划为啥失败 -&gt; 改善问题 -&gt; 制订新计划<br></b></p><p>  当然新计划可能成功，也可能失败，失败之后，学霸会重复上述流程。久而久之，新计划中失败的越来越少，成功的越来越多，学霸也实现了幼年期到成熟期的进化。</p><p>  那么为啥计划会失败呢？明明学霸们平时是拥有高度自控力的，难道到了寒假自控力会失效？</p><p>  这就要说到自控力的假象了。</p><h3 id="三、自控力的假象与真相"><a href="#三、自控力的假象与真相" class="headerlink" title="三、自控力的假象与真相"></a>三、自控力的假象与真相</h3><hr><p>  不知道大家有没有这样一种感觉：高考前是自己学习力和自控力的巅峰，那时候每天都要做好多题，学到很晚，但第二天还是精神抖擞，继续奋战；上了大学之后，时间宽裕了， 反而变得懒散了，没有之前学习的劲头和毅力了，到了假期更是懒得一发不可收拾，熬夜看剧、晚睡晚起、暴饮暴食那都是家常便饭。</p><p>  为什么会这样呢？难道时间越宽裕，自控力就越薄弱？这显然不科学。那就是因为时间越宽裕，我们越容易懈怠和堕落？但这是结果，并不是原因。我们以为自己的自控力曾经很强，上大学后变弱了，放假后则因为懈怠愈发孱弱——这其实这个假象。那真相是什么？</p><p>  <b>Tal老师为我们揭示了两个真相：</b></p><blockquote><ol><li>保证我们高效运转的其实是习惯，而不是自控力。</li></ol></blockquote><p>  想想在高考之前的那种紧张的学习氛围里，我们被动的养成了很多习惯——每天规律的上课、自习、吃饭和睡觉，我们目标明确——每个月、每个星期乃至每天复习什么，老师们都替我们安排好了。这些我们习以为常，就像你每天早上起床都会自动去刷牙一样自然（说不刷牙的你走开！）</p><p>  你想想想你起床后刷牙的过程：穿衣服（好吧我知道有人不穿），拿起杯子和牙刷，走到卫生间，接水，挤牙膏，开始刷。即使你可能还睡眼惺忪，但这一套流程你仍然能精确无比、毫不费力的执行下来。这个过程需要一丢丢的自控力吗？基本不需要对不对？</p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/04_%E8%87%AA%E5%BE%8B.png" alt=""></p><p>  所以高中的那些学习，其实并不需要太多自控力。而当你进了大学，课程安排变得自由了，你丧失了那些被动习惯，开始自己规划学习和生活时，才是需要自控力的时候。而此时，很多人不得不面对第二个真相：</p><blockquote><ol start="2"><li>人的自控力是有限的</li></ol></blockquote><p>  很多人不知道，<b>自控力和肌肉力量一样是有限的</b>。这个结论被大量的心理学实验证明，大家上网搜索一下就能看到，我这里不做赘述，我只打个比方，相信能帮你更好的理解这个结论。</p><p>  想象下，当你搬宿舍、或是换教室时，你把一摞又一摞沉重的书本，吃力的从这个屋子搬到那个屋子之后，你双臂酸软，腰酸背疼，严重者可能连一杯水都举不起来——因为你的肌肉力量耗尽了。</p><p>  自控力也一样，我们在日常生活中要面对各种各样的诱惑：桌上昨天新买的一大堆零食，双十一淘宝主页玲琅满目的商品，男神胡歌的新剧又开播了……我们要反复抵抗这些诱惑才能专注于那些重要的目标，比如学习和减肥。每拒绝一次诱惑，你的自制力就消耗一分，如果面临的诱惑太多，总会有一个时刻，我们会累到无力抵抗，任由暴饮暴食、刷爆淘宝、熬夜看剧这些行为支配我们的生活。</p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/05_%E5%90%83%E8%B4%A7.png" alt=""></p><p>  当然现实没有那么可怕，肌肉酸痛过两天会恢复，自制力嘛，你睡个好觉也能回归正常。有意思的是，不同人天生力气不一样，自制力强弱也不一样，自制力超群或是弱到掉渣的，在人群中都占很小的比例，大多数人都处在中间那个状态——不好也不坏。</p><p>  所以我们得出的结论是：学霸就是那群天生自制力超群的人？如果是这样，那我写这篇文章也太没意思了。</p><p>  有机智的童鞋马上反应过来了：哦！既然我们可以锻炼肌肉，自制力也是可以锻炼的，对吧！我们只要把自制力锻炼到很强就可以了！</p><p>  这话没错，然而肌肉力量有极限，自制力也是有极限的。生活中，我们面临的诱惑如此之多，靠后天锻炼出来的自制力依然会不够用。另一方面，就像上面讲到的第一点：<b>无论是校园里的“成熟期学霸”，还是社会里的精英人士，其高效的学习和生活，并不像我们往常以为的那样，依赖于强大的自制力，而是得益于后天构建起来的习惯体系。</b></p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/06_%E7%9F%B3%E5%A4%B4.png" alt=""></p><p>  <b>如何利用我们有限的自制力，去构建这样一套体系，</b>才是我最想说的东西，当年的Tal童鞋，也是在意识到这个问题之后，才开始了他的翻盘之旅，成功进化为成熟体学霸，最后成为哈佛教授，走上人生巅峰的。（好吧别打我，我承认后面这段是我瞎编的。）</p><p>  但是构建习惯体系，并不是一件轻松的事情，原因有两个：</p><p>    1.很多人没有意识到，有一个看不见的敌人在阻挠我们的行动，</p><p>    2.很多人不知道，习惯背后的原理。</p><h3 id="四、看不见的敌人"><a href="#四、看不见的敌人" class="headerlink" title="四、看不见的敌人"></a>四、看不见的敌人</h3><hr><p>  很多人都想要减肥，想要健身，但大多数人的状况是：决定要减肥或健身后，制定了详细的计划，买了一堆装备，办了几千块的健身卡，却在去了不到三次后，将这些东西都束之高阁。</p><p>  为什么建立一个锻炼的习惯这么难呢？因为太多人不了解习惯背后的原理，更重要的原因是，太多人太急了，太想在短期内看到显著的改变。</p><p>  是的，我们都希望一夜暴富，一朝成名，都喜欢看“穷小子白手起家创业成功，一年变身亿万富翁”、“胖女孩半年瘦身八十斤俘获男神芳心”的故事。但这些不是我们的错，我们之所以天生短视，喜欢即时的反馈和满足感，是因为大脑里，住着一个看不见的敌人在捣乱。首先你得意识到它的存在，然后才能战胜它。</p><p>  在几百万年前，我们的祖先还茹毛饮血的时候，资源稀缺，吃了上顿没下顿，大脑需要持续的分泌化学物质，它们促使人们去寻找并摄入食物，热量越高越好，把自身的脂肪储存的越多越好；如果不是这种机制，人类很可能存活不到今天。 </p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/07_%E5%8F%A4%E4%BB%A3%E4%BA%BA.png" alt=""></p><p>  可我们不是原始人，我们进化出了更高级的控制单元，所以我们学会了计划，学会了为达成长期目标放弃短期利益。但原始的那部分大脑并没有消亡，它依然在时刻争夺着身体的控制权，促使我们孜孜不倦的寻求即时的满足感。</p><p>  所以你明白了吗？为什么在认真学习时，忽然会冒出“学这么久了，看一集美剧吧！”的念头；为什么晚饭吃了不少，睡前还是管不住自己伸向零食的手；为什么你打开手机想要背单词，却鬼使神差的戳开了微博；这些的本质都是原始大脑在作怪。</p><p>  好了，看到这里，你意识到敌人的存在了，即大脑的原始部分；你也意识到它惯用的伎俩——即时满足感。但这还不够，要打败它，你得掌握科学的武器，也就是习惯的原理。</p><h3 id="五、习惯的原理"><a href="#五、习惯的原理" class="headerlink" title="五、习惯的原理"></a>五、习惯的原理</h3><hr><p>  习惯的养成，依赖于四个部分：<b> 触机（cue）、惯性行为（routine）、奖励（reward）和信念（belief）</b>：</p><blockquote><p><b>触机：</b>即触发习惯的原因，你可以想象成手枪的扳机，按下扳机，子弹就打出去了。习惯的触机有很多，可能是时间、地点或场景。你早上刷牙的触机是起床这个动作；去吃午饭是因为时间到了（额，好吧，还有肚子饿了）；有人习惯睡前刷微博，那么触机可能是你躺下来盖上被子。触机本身没有好坏之分，决定习惯好坏的，是它引发的惯性行为。</p></blockquote><blockquote><p><b>惯性行为：</b>之所以叫惯性，是因为它是无意识的，比如一打开电脑就先上网看看娱乐新闻；比如睡前一定要刷一下朋友圈。在建立新习惯的过程中，<b>我们的自制力，就用于修正那些引起拖延的旧行为，将其替换为新的惯性。</b>在更正坏习惯时，你需要格外留意引发它的触机，同时关注自己的行为，不断提醒自己不要重蹈覆辙。这一步是最消耗时间和精力的过程，可能要与旧习惯反复拉锯，因为良好惯性行为的建立不仅需要有自制力去克服旧的行为，还需要在行为结束时获得正向的反馈，也就是下面要说的“奖励”。</p></blockquote><blockquote><p><b>奖励：这是习惯养成中至关重要的一环，它往往被人们忽略。</b>为什么坏习惯容易养成且难以改变？因为它们的奖励往往即时而明显：打游戏、刷网页、吃零食这些哪个不是这样？好习惯难以形成，也恰恰因为短期的奖励不够明显。背单词、健身、练书法这些行为往往需要较长的时间才能看到效果，有些人天生能从过程中获得精神激励，但很多人不行，那我们需要人为的赋予自己奖励：比如记录自己的成长和进步、时不时发个微博鼓励下自己、达成一些小目标时吃顿好的庆祝下等等（啊喂也不要暴饮暴食啊！） 关于奖励，稍稍多说几句。诸如学习、健身这种事本身是有点反人性的，有没有什么办法能快速建立正向奖励机制呢？这个展开能写两本书…知乎上有很多学习、健身相关的优质答案了，我这里不赘述。我想提供一种思维：<b>积极的、开放性的、成长性的思维。即多去看看那些享受学习、享受健身的人是怎么做到这些事情的，尝试去学习他们的方法，把目光放在积极面上，而不是怀疑自己能力不行，觉得自己做不好。</b> 此外，强化你的“信念”有助于你获得精神上的正反馈。 </p></blockquote><blockquote><p><b>信念：</b> 这是支撑你建立习惯的内在动力：你想要每天背单词，是为了干掉英语考试；你想要学会弹吉他，是为了能在各种晚会上一显身手；你想要规律饮食、早睡早起，是为了身体健康；你想要健身减肥，可能是想俘获女神/男神的芳心。总之，你是想成为一个更好的人。<b>信念能让你你在养成好的习惯时获得精神上的正向反馈，同时，你的信念越强烈，就越能忍受改变过程中的痛苦与反复。</b></p></blockquote><p>  明白了这些，可以更好的帮你建立习惯，而关于如何建立习惯，有太多的技巧，诸如远离诱惑、分解目标、建立记录和反馈机制……多的能写出一本书（事实上有很多关于习惯的书了，后面我会推荐一本），我这里想说点心态上的东西，也是我在踩了无数坑后，用斑斑血泪换到的重要经验：</p><h3 id="六、三点心态"><a href="#六、三点心态" class="headerlink" title="六、三点心态"></a>六、三点心态</h3><hr><blockquote><p>1.. 接受自己是个普通人</p></blockquote><p>  真的，大家都是普通人，承认这一点没啥可耻的。拿我最喜欢的肌肉模型举例子吧，我始终觉得，建立习惯也好，培养能力也好，都跟锻炼肌肉是一码事：你今天只能举30斤的哑铃，下周你最多举35斤，你不能说明天我就要举60斤。同样的，如果你之前从没去过健身房，不要指望刚开始一周能去三次，更科学的计划，是从一周去一次做起；如果你之前沉迷游戏，一周打七天，不要指望明天就能戒掉它，科学一点的目标，是下周只打六天。</p><p>  承认自己一口气吃不成个胖子，敢于面对现实，也是成熟的标志之一，不是吗？《积极心理学》中的建议是：<b>对于一般人，一个月能建立一到两个习惯就很不错了。</b>不要太贪心，你真能做到，一年下来至少养成12个习惯，你能够爆掉大多数人了。</p><p>  允许自己失败，允许自己休息，在此之上，我特别想强调的是：对自己少一些苛责，多一些鼓励。 </p><blockquote><ol start="2"><li>少一些苛责，多一些鼓励</li></ol></blockquote><p>  <b>我们从小到大接受的教育，太过于强调严格自律和自我批评，却很少教我们如何鼓励自己。</b>太多人放弃改变，是因为在反复的失败后，用批评和苛责扑灭了自己内心的火种。</p><p>  我大学最堕落的两年，深受这种思想所害，最后让我走出来的，不止是不甘堕落，更是每次失败后，像对待朋友，有时甚至是像对待小孩子一样，鼓励自己，哄自己：“这周计划锻炼三次，只锻炼了一次？没事，也比不锻炼强吧，是不是计划不合理？下周试试两次吧！”“今天计划要学的又没学完，下午还刷了两个小时网页……没关系，比昨天好啦！昨天刷了大半天好嘛！”。</p><p>  计划失败了，大多数人会羞愧，会痛苦，会责骂自己。<b>但少有人去安慰自己，告诉自己“没关系，你是个普通人，你总会有脆弱的时候”；少有人像鼓励朋友一样鼓励自己，跟自己说“加油，还有机会，来！想一想下次怎么可以做得更好”。</b></p><p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/02img/08_cheer.png" alt=""></p><p>  真的，在与欲望和弱点搏斗的过程中，我们大多数时候是没有队友的，你只有自己给自己打气。</p><p>  嗯，有人担心过多的自我安慰会让自己松懈，所以我要强调的最后一点，是行动。</p><blockquote><ol start="3"><li>行动起来，从现在开始</li></ol></blockquote><p>  无论你苛责还是鼓励自己，最后引发改变的，是行动。想做什么，现在就开始做吧，不要等到以后。在我的认知中，90%的“明天再说”等于“明天就忘” 。想看书的，今晚睡前就拿起来，哪怕只看一页；想锻炼的，今天就蹦跶起来，哪怕只是一组4分钟的燃脂训练；想学画画的，今天就画起来，哪怕就画一个水杯。</p><p>  <b>只要你做了，无论多少，你都是在行动，都是改变，而如上一点所说：再微小的改变，都值得褒奖。</b></p><p>  就像虽然90%的人看了这篇回答，过两天还是会忘记。但我觉得吧，不要紧啦，大家都是普通人嘛，别苛责自己，至少这么长的文章，你都快看完了，对不对？你还是很棒哒！而且看了这篇文章本身，就是“从现在做起”的体现啊！</p><p>  你看，学以致用嘛，我就是这么看得开 ╮(￣▽￣”)╭</p><p>  最后，送一句我爱极了的话给大家：</p><blockquote><p> Incremental change is better than ambitious failure.<br>   逐步的改善好过雄心勃勃的失败</p></blockquote><h3 id="End-后记-为什么要写这篇文章"><a href="#End-后记-为什么要写这篇文章" class="headerlink" title="End.后记-为什么要写这篇文章"></a>End.后记-为什么要写这篇文章</h3><hr><p>  <b>我曾是一个学渣，很渣很渣的那种：</b>我背着笔记本去图书馆，却刷了半天的网页，又看了半天的电影，晚上我把自己骂一顿，决定明天好好学习，结果第二天又故态复萌；我曾整天翘课打游戏，晚上通宵到早上7点，睡到中午1点，起来吃碗泡面，下午继续打，这样循环了一个多学期。我不是没有想过改变，但每一次下定决心后的热血，都持续不到三天，很快就会陷入计划失败-&gt; 自责 -&gt; 重新计划-&gt; 计划失败的恶性循环。</p><p>  在相当长的一段时间里，我都以为自控力是限制自己进步的最大阻碍，我痛恨没有毅力的自己，觉得这辈子没啥出息了。直到后来，见了很多很多人，读了很多很多书，我才明白以前很多对于自控、习惯和效率的理解都是错的。在那以后，我慢慢摆脱了诸如自控失败、拖延症这类问题的困扰，变成了别人眼中的“学霸”；我找到了自己喜欢做的事情，每天过得忙碌而有意义。</p><p>  而为了达到今天的状态，我走了太多太多的弯路，我也看到太多人，跟我掉进同样的坑里，想要爬出来，却因为力气用错了地方而徒劳无功。<b>即使是寒假计划失败这样一件看上去很小的事，背后却隐藏着太多的学问，</b>它们分散在不同的书与课程里，没有足够经历的人，难以一窥全貌，结果就是反复的掉进坑里，在爬坡的过程中耗尽了心力，最终放弃了自己。</p><p>  <b>我常常想，如果当年有人告诉我正确的道理和方法，我的人生会不会顺遂很多？</b></p><p>  所以我啰啰嗦嗦的写这么多，哪怕只对一个读者有用，就不枉我花二十多个小时，去琢磨和修改这篇东西。</p><p>  最后的最后，再送两段话给大家： </p><blockquote><p>  “在生活的过程中，会有很多次机会，让你不得不面对自己身上的缺陷和弱点，事实会一次又一次提醒你，你是一个不完美的人，需要改变。可人的本性是懒惰又脆弱的，大部分人选择麻痹自己，转向短期的即时刺激（上网购物打游戏，暴食社交一夜 情等），少数人选择改变自己，于是就会有痛苦，有反复，有成功和放弃。”<br>  “没有人生来完美，每一个趋近于优秀的人格，都是经过了多次自我改造的结果。没有试图去改变的人，继续重复着自己日复一日的生活，看着那些早已看过的烂熟于心的风景，而对于正在改变的人来说，每一天都是新的。”</p></blockquote><p>  这两段话来自知友@陈诺，我稍有改动，基本没有曲解原意，推荐大家看看她的回答，很多答案对我帮助很大。</p><p>  <b>在改变的路上没有捷径，只有不懈的坚持和科学的方法，</b>祝你们每一天都和之前不一样，每一天都是新的，大家共勉。</p><h3 id="Ref-推荐阅读-amp-参考文献"><a href="#Ref-推荐阅读-amp-参考文献" class="headerlink" title="Ref.推荐阅读&amp;参考文献"></a>Ref.推荐阅读&amp;参考文献</h3><hr><p>  一篇回答无法解决所有的问题，希望能给大家一些启发。这篇回答的所有重要观点，几乎都来自于下面这些书和课程，推荐给大家：</p><p>     1. <a href="https://book.douban.com/subject/10786473/" target="_blank" rel="noopener">自控力（豆瓣）</a></p><p>     2. <a href="https://book.douban.com/subject/20507212/" target="_blank" rel="noopener">习惯的力量（豆瓣）</a></p><p>     3. <a href="http://open.163.com/special/positivepsychology/" target="_blank" rel="noopener">哈弗幸福课</a></p><p>  另附一篇回答，为什么期望短期内获得大幅改变的想法不切实际而且有害：</p><p><a href="https://www.zhihu.com/question/29147255/answer/152408781" target="_blank" rel="noopener">人可能在短时间内各方面内都得到大幅提高吗？</a></p><p><b>真·后记（2016.3.18更新）</b></p><p>  这篇回答短时间内获得了大量的赞，这令我始料未及。我想强调一点，这篇文章的初衷，是给大家一些启发，让大家对习惯和自控有一些正确的认知。更全面科学的解答，我还是极力推荐大家学一学上面的书和课程。</p><p>  此外，一夜顿悟从而扭转人生这样的事极少发生。<b>真正的顿悟（例如王阳明龙场悟道）之所以能发生，源于之前长期的实践和思考，是量变的积累遇到了合适的契机，从而引发了质变。</b></p><p>  改变没有捷径，它是漫长的过程，它始于你的意愿，在正确的行动下得到积极的结果。《自控力》这本书很多人买了，有多少真的看完了？又有多少人长期对照自己的问题回去翻阅过三遍以上？又有多少人按它讲的方法去冥想、去运动、去观察记录自己的行为？《幸福课》也有很多人看过，又有多少人认真的做笔记，按课里的方法去设定目标、去挑战风险、去写感恩记录、去关注事物的积极面？</p><p>  <b>懂得很多道理只是前提，决定你能不能过好这一生的，是你的选择和行动。</b></p><p><b> 作者：秋霜色</b></p><p><b> 链接：<a href="https://www.zhihu.com/question/21368231/answer/90497581" target="_blank" rel="noopener">https://www.zhihu.com/question/21368231/answer/90497581</a></b></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自制力差的症状&quot;&gt;&lt;a href=&quot;#自制力差的症状&quot; class=&quot;headerlink&quot; title=&quot;自制力差的症状&quot;&gt;&lt;/a&gt;自制力差的症状&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;表现的症状或后果包括但不限于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;无法长时间做同一件事情&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://rabbit2020.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://rabbit2020.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>呆萌兔の博客上线啦~</title>
    <link href="http://rabbit2020.com/2020/01/24/bo-ke-jian-jie/bo-ke-shang-xian-la/"/>
    <id>http://rabbit2020.com/2020/01/24/bo-ke-jian-jie/bo-ke-shang-xian-la/</id>
    <published>2020-01-24T14:30:00.000Z</published>
    <updated>2020-05-06T13:26:21.892Z</updated>
    
    <content type="html"><![CDATA[<p>  <br>欢迎访问呆萌兔的个人博客，博客刚刚上线，内容比较少，后期会慢慢添加。本站会记录博主的学习历程，也会记录一些生活上的事情(*❦ω❦)，欢迎大家访问~。</p><img src="https://rabbit2020-1301147272.cos.ap-shanghai.myqcloud.com/article/01img/01.png" width="50%" height="50%"><h4 id="就先这样了！"><a href="#就先这样了！" class="headerlink" title="就先这样了！"></a>就先这样了！</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  &lt;br&gt;欢迎访问呆萌兔的个人博客，博客刚刚上线，内容比较少，后期会慢慢添加。本站会记录博主的学习历程，也会记录一些生活上的事情(*❦ω❦)，欢迎大家访问~。&lt;/p&gt;
&lt;img src=&quot;https://rabbit2020-1301147272.cos.ap-shang
      
    
    </summary>
    
    
      <category term="博客" scheme="http://rabbit2020.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="随笔" scheme="http://rabbit2020.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="博客" scheme="http://rabbit2020.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
